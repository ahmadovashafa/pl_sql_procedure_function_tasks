
Tasks PL/SQL Procedures&Functions
1.Task: Create a procedure called proc_display that simply prints "Hello from Procedure!".
 create or replace  procedure proc_display 
    is
    begin
    proc_display;
  DBMS_OUTPUT.PUT_LINE('hello form procedure');
end;

2.Task: Create a procedure proc_greet that takes a v_name parameter and prints "Hello, [v_name]!".


create or replace procedure proc_greet(v_name in VARCHAR2) is 
begin
  DBMS_OUTPUT.PUT_LINE('Hello'||v_name||'!');
end;


3.Task: Create a function func_square that takes a number as an argument and returns its square.

create or replace function  func_square(a_num  number) 
RETURN number
is
begin
  RETURN a_num*a_num;
end;


4.Task: Write a function func_upper that takes a string and returns its uppercase version.

create or replace function func_upper(a_string VARCHAR2) RETURN string is
begin
  RETURN upper(a_string);
end;

5.Task: Create a procedure proc_fullname that takes v_firstName and v_lastName as parameters and prints the full name.

create or replace procedure proc_fullname(v_firstName varchar2, v_lastName varchar2) is
begin

  DBMS_OUTPUT.PUT_LINE(v_firstName || ' ' || v_lastName);
end;

6.Task: Write a function func_ageGroup that takes an age as a parameter and returns 'Child' if age is less than 18, 'Adult' otherwise.

create or replace function func_ageGroup(age NUMBER) RETURN number is
begin
if age>18 then
    DBMS_OUTPUT.PUT_LINE('Adult');

else
    DBMS_OUTPUT.PUT_LINE('Child');

end if;
end;

7.Task: Create a procedure proc_displayNumbers that takes a number n and prints numbers from 1 to n.

create or replace procedure proc_displayNumbers(n in number) is
begin
for i in  1..n  loop
    DBMS_OUTPUT.PUT_LINE(i);
end loop;
end;

8.Task: Write a function func_calculateArea that takes the radius of a circle as an argument and returns its area.

create or replace function func_calculateAreaa(radius NUMBER) RETURN number is
area number;
begin
area:=3.14*radius*radius;
  RETURN area;
end;

9.Task: Create a procedure proc_divide that takes two numbers and prints their division result. It should handle division by zero and print an error message for it.
create or replace procedure proc_divide( dividend number, divisor number) is
    result number;
begin
    if divisor = 0 then
        DBMS_OUTPUT.PUT_LINE('Error: Division by zero is not allowed.');
    else
        result := dividend / divisor;
        DBMS_OUTPUT.PUT_LINE('Result of division: ' || result);
    end if;
exception
    when others then
    DBMS_OUTPUT.PUT_LINE('An error occurred: ');
end;


10.Task: Write a function func_daysDifference that takes two dates as arguments and returns the number of days between them.

create or replace function func_daysDifference(date1 date, date2 date) RETURN number is 
days_differ number;
begin
days_differ:=date2-date1;
  RETURN abs(days_differ);
end;
